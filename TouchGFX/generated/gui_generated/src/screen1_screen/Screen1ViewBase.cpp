/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    gaugeValueSetCallback(this, &Screen1ViewBase::gaugeValueSetCallbackHandler),
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    imageBG.setBitmap(touchgfx::Bitmap(BITMAP_A0001_ID));
    imageBG.setPosition(0, 0, 800, 480);
    imageBG.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(imageBG);

    gaugeLeft.setBackground(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_WIDGETS_GAUGE_SMALL_BACKGROUNDS_LIGHT_PRECISION_ID));
    gaugeLeft.setPosition(34, 163, 236, 236);
    gaugeLeft.setCenter(118, 118);
    gaugeLeft.setStartEndAngle(-90, 90);
    gaugeLeft.setRange(0, 100);
    gaugeLeft.setValue(35);
    gaugeLeft.setNeedle(BITMAP_GLASS_THEME_IMAGES_WIDGETS_GAUGE_SMALL_NEEDLES_ROUGH_ID, 8, 53);
    gaugeLeft.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeLeft.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeLeft.setValueSetAction(gaugeValueSetCallback);
    add(gaugeLeft);

    gaugeMid.setBackground(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_WIDGETS_GAUGE_SMALL_BACKGROUNDS_LIGHT_PRECISION_ID));
    gaugeMid.setPosition(282, 163, 236, 236);
    gaugeMid.setCenter(118, 118);
    gaugeMid.setStartEndAngle(-90, 90);
    gaugeMid.setRange(0, 100);
    gaugeMid.setValue(40);
    gaugeMid.setNeedle(BITMAP_GLASS_THEME_IMAGES_WIDGETS_GAUGE_SMALL_NEEDLES_ROUGH_ID, 8, 53);
    gaugeMid.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeMid.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gaugeMid);

    gaugeRight.setBackground(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_WIDGETS_GAUGE_SMALL_BACKGROUNDS_LIGHT_PRECISION_ID));
    gaugeRight.setPosition(529, 163, 236, 236);
    gaugeRight.setCenter(118, 118);
    gaugeRight.setStartEndAngle(-90, 90);
    gaugeRight.setRange(0, 100);
    gaugeRight.setValue(35);
    gaugeRight.setNeedle(BITMAP_GLASS_THEME_IMAGES_WIDGETS_GAUGE_SMALL_NEEDLES_ROUGH_ID, 8, 53);
    gaugeRight.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gaugeRight.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gaugeRight);

    logoBMH.setBitmap(touchgfx::Bitmap(BITMAP_BMH_LOGO_ID));
    logoBMH.setPosition(112, 13, 80, 80);
    logoBMH.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(logoBMH);

    logoDLR.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_ID));
    logoDLR.setPosition(571, 53, 40, 40);
    logoDLR.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(logoDLR);

    logoGDS2.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_GDS2_ID));
    logoGDS2.setPosition(538, 13, 179, 34);
    logoGDS2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(logoGDS2);

    textAreaTitel.setXY(336, 29);
    textAreaTitel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaTitel.setLinespacing(0);
    textAreaTitel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YY5C));
    add(textAreaTitel);

    textAreaMiddle.setXY(377, 119);
    textAreaMiddle.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaMiddle.setLinespacing(0);
    Unicode::snprintf(textAreaMiddleBuffer, TEXTAREAMIDDLE_SIZE, "%s", touchgfx::TypedText(T_TEXTAREAMIDDLEWILDCARD).getText());
    textAreaMiddle.setWildcard(textAreaMiddleBuffer);
    textAreaMiddle.resizeToCurrentText();
    textAreaMiddle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2CU8));
    add(textAreaMiddle);

    textAreaLeft.setXY(113, 119);
    textAreaLeft.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaLeft.setLinespacing(0);
    Unicode::snprintf(textAreaLeftBuffer, TEXTAREALEFT_SIZE, "%s", touchgfx::TypedText(T_TEXTAREALEFTWILDCARD).getText());
    textAreaLeft.setWildcard(textAreaLeftBuffer);
    textAreaLeft.resizeToCurrentText();
    textAreaLeft.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y98A));
    add(textAreaLeft);

    textAreaRight.setXY(594, 119);
    textAreaRight.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textAreaRight.setLinespacing(0);
    Unicode::snprintf(textAreaRightBuffer, TEXTAREARIGHT_SIZE, "%s", touchgfx::TypedText(T_TEXTAREARIGHTWILDCARD).getText());
    textAreaRight.setWildcard(textAreaRightBuffer);
    textAreaRight.resizeToCurrentText();
    textAreaRight.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1UUH));
    add(textAreaRight);

    textAreaLeftValue.setXY(125, 299);
    textAreaLeftValue.setColor(touchgfx::Color::getColorFromRGB(12, 255, 255));
    textAreaLeftValue.setLinespacing(0);
    Unicode::snprintf(textAreaLeftValueBuffer, TEXTAREALEFTVALUE_SIZE, "%s", touchgfx::TypedText(T_TEXTAREALEFTVALUEWILDCARD).getText());
    textAreaLeftValue.setWildcard(textAreaLeftValueBuffer);
    textAreaLeftValue.resizeToCurrentText();
    textAreaLeftValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5G7R));
    add(textAreaLeftValue);

    textAreaMiddleValue.setXY(373, 299);
    textAreaMiddleValue.setColor(touchgfx::Color::getColorFromRGB(12, 255, 255));
    textAreaMiddleValue.setLinespacing(0);
    Unicode::snprintf(textAreaMiddleValueBuffer, TEXTAREAMIDDLEVALUE_SIZE, "%s", touchgfx::TypedText(T_TEXTAREAMIDDLEVALUEWILDCARD).getText());
    textAreaMiddleValue.setWildcard(textAreaMiddleValueBuffer);
    textAreaMiddleValue.resizeToCurrentText();
    textAreaMiddleValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_050I));
    add(textAreaMiddleValue);

    textAreaRightValue.setXY(609, 299);
    textAreaRightValue.setColor(touchgfx::Color::getColorFromRGB(11, 247, 255));
    textAreaRightValue.setLinespacing(0);
    Unicode::snprintf(textAreaRightValueBuffer, TEXTAREARIGHTVALUE_SIZE, "%s", touchgfx::TypedText(T_TEXTAREARIGHTVALUEWILDCARD).getText());
    textAreaRightValue.setWildcard(textAreaRightValueBuffer);
    textAreaRightValue.resizeToCurrentText();
    textAreaRightValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFTF));
    add(textAreaRightValue);

    flexButton1.setBitmapXY(0, 0);
    flexButton1.setAction(flexButtonCallback);
    flexButton1.setPosition(112, 13, 80, 80);
    add(flexButton1);
}

Screen1ViewBase::~Screen1ViewBase()
{

}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::gaugeValueSetCallbackHandler(const touchgfx::AbstractProgressIndicator& src)
{
    if (&src == &gaugeLeft)
    {
        //InteractionLeft
        //When gaugeLeft gauge value set set wildcard textAreaLeftValue
        //Set textAreaLeftValue wildcard to __SingleUse_68WD
        Unicode::snprintf(textAreaLeftValueBuffer, TEXTAREALEFTVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_68WD).getText());
        textAreaLeftValue.setWildcard(textAreaLeftValueBuffer);
        textAreaLeftValue.invalidate();
        textAreaLeftValue.resizeToCurrentText();
        textAreaLeftValue.invalidate();
    }
}

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
    {
        //InteractionToScreen2
        //When flexButton1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards North
        application().gotoScreen2ScreenSlideTransitionNorth();
    }
}
